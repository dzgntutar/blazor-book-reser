@page "/user-list"
@using BookReservation.Client.Utils
@using BookReservation.Shared.Dtos
@inject HttpClient Http

<div class="container">
	<div class="d-flex justify-content-start">
		<input type="button" class="btn btn-primary btn-sm" @onclick="AddUser" value="New" />
	</div>
	<div class="d-flex justify-content-center">

		@{
			if (userList?.Count > 0)
			{

				<table class="table table-striped w-75">
					<thead>
						<tr>
							<th>#</th>
							<th>UserName</th>
							<th>First Name</th>
							<th>Last Name</th>
							<th>Email</th>
							<th>Create Date</th>
							<th>Active</th>
							<th></th>
						</tr>

					</thead>
					<tbody>
						@foreach (var user in userList)
						{
							<tr>
								<td>@user.Id</td>
								<td>@user.UserName</td>
								<td>@user.FirstName</td>
								<td>@user.LastName</td>
								<td>@user.Email</td>
								<td>@user.CreateBy</td>
								<td>@user.IsActive</td>
								<td><input type="button" class="btn btn-primary" value="Update" @onclick="@(() => UpdateUser(user.Id))"/></td>
							</tr>
						}
					</tbody>
				</table>
			}
			else
			{
				<LoadingSpinnerComponent SpinnerColor="warning" />
			}
		}
	</div>
</div>

@code {

	List<UserGetAllResponseDto> userList = new List<UserGetAllResponseDto>();

	[Inject]
	ModalManager ModalManager { get; set; }

	[Inject]
	NavigationManager NavigationManager { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var response = await Http.GetFromJsonAsync<GResponse<List<UserGetAllResponseDto>>>("api/users");

		if (response.IsSucces)
		{
			userList = response.Data;
		}
		else
		{
			await ModalManager.ShowMessageAsync("Warning", response.Message);
		}
	}

	private void AddUser(){
		NavigationManager.NavigateTo("/user/add");
	}

	private void UpdateUser(int userId)
	{
		NavigationManager.NavigateTo($"/user/update/{userId}");
	}
}