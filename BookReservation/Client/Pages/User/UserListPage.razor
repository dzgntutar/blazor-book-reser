@page "/user-list"
@using BookReservation.Client.Utils
@using BookReservation.Shared.Dtos
@inject HttpClient Http

<div class="container">
	<div class="d-flex justify-content-start">
		<input type="button" class="btn btn-primary btn-sm" @onclick="AddUser" value="New" />
	</div>
	<div class="d-flex justify-content-center">

		@{
			@if (!showSpinner)
			{
			//
				<table class="table table-striped">
					<thead>
						<tr>
							<th>#</th>
							<th>First Name</th>
							<th>Last Name</th>
							<th>UserName</th>
							<th>Email</th>
							<th>Create Date</th>
							<th>Active</th>
							<th></th>
						</tr>

					</thead>
					<tbody>
						@if (userList?.Count > 0)
						{
							@foreach (var user in userList)
							{
								<tr>
									<td>@user.Id</td>
									<td>@user.FirstName</td>
									<td>@user.LastName</td>
									<td>@user.UserName</td>
									<td>@user.Email</td>
									<td>@user.CreateDate</td>
									<td>@user.IsActive</td>
									<td>
										<input type="button" class="btn btn-primary" value="Update" @onclick="@(() => UpdateUser(user.Id))" />
										<input type="button" class="btn btn-danger" value="Delete" @onclick="@(() => DeleteUser(user.Id))" />
									</td>
								</tr>
							}
						}
						else
						{
							<tr>No content</tr>
						}

					</tbody>
				</table>
			}
			else
			{
				<LoadingSpinnerComponent SpinnerColor="warning" />
			}
		}
	</div>
</div>

@code {

	List<UserGetAllResponseDto> userList = new List<UserGetAllResponseDto>();

	bool showSpinner = true;

	[Inject]
	ModalManager ModalManager { get; set; }

	[Inject]
	NavigationManager NavigationManager { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var response = await Http.GetFromJsonAsync<GResponse<List<UserGetAllResponseDto>>>("api/users");

		if (response.IsSucces)
		{
			userList = response.Data;
			showSpinner = false;
		}
		else
		{
			await ModalManager.ShowMessageAsync("Warning", response.Message);
		}
	}

	private void AddUser()
	{
		NavigationManager.NavigateTo("/user/add");
	}

	private void UpdateUser(int userId)
	{
		NavigationManager.NavigateTo($"/user/update/{userId}");
	}

	private async Task DeleteUser(int userId)
	{
		showSpinner = true;

		var response = await Http.DeleteAsync($"api/users/{userId}");

		if (response.IsSuccessStatusCode)
		{
			userList.Remove(userList.First(s => s.Id == userId));
			showSpinner = false;
		}
		else
		{
			await ModalManager.ShowMessageAsync("Hata", "Silme iþlemi sýrasýnda bir hata meydana geldi!");
		}
	}
}